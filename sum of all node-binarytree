#include <stdio.h>
#include <stdlib.h>

// Define the structure for a tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to find the sum of all node values in the binary tree
int sumOfNodes(Node* root) {
    // Base case: if the root is NULL, return 0
    if (root == NULL) {
        return 0;
    }
    
    // Calculate the sum of the left and right subtrees and add the current node's data
    int leftSum = sumOfNodes(root->left);
    int rightSum = sumOfNodes(root->right);
    
    return leftSum + rightSum + root->data;
}

int main() {
    // Create nodes
    Node* root = createNode(10);
    root->left = createNode(5);
    root->right = createNode(20);
    root->left->left = createNode(3);
    root->left->right = createNode(8);
    root->right->left = createNode(15);
    root->right->right = createNode(25);
    
    // Find the sum of all node values in the binary tree
    int totalSum = sumOfNodes(root);
    
    // Print the sum of all node values
    printf("Sum of all node values in the binary tree: %d\n", totalSum);
    
    // Free allocated memory (not shown here for simplicity)
    // In a real application, you'd need to implement a function to free the tree nodes.

    return 0;
}
