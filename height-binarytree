#include <stdio.h>
#include <stdlib.h>

// Define the structure for a tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to calculate the height of the binary tree
int height(Node* root) {
    if (root == NULL) {
        return -1; // Return -1 for an empty tree; use 0 if height of an empty tree is considered 0.
    }
    
    // Compute the height of left and right subtrees
    int leftHeight = height(root->left);
    int rightHeight = height(root->right);
    
    // Return the larger height of the two subtrees plus one for the current node
    return (leftHeight > rightHeight ? leftHeight : rightHeight) + 1;
}

int main() {
    // Create nodes
    Node* root = createNode(10);
    root->left = createNode(5);
    root->right = createNode(20);
    root->left->left = createNode(3);
    root->left->right = createNode(8);
    root->right->left = createNode(15);
    root->right->right = createNode(25);
    
    // Calculate the height of the binary tree
    int treeHeight = height(root);
    
    // Print the height of the tree
    printf("Height of the binary tree: %d\n", treeHeight);
    
    // Free allocated memory (not shown here for simplicity)
    // In a real application, you'd need to implement a function to free the tree nodes.

    return 0;
}
