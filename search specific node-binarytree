#include <stdio.h>
#include <stdlib.h>

// Define the structure for a tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to search for a specific value in the binary tree
int searchNode(Node* root, int value) {
    // Base case: if the root is NULL, the value is not found
    if (root == NULL) {
        return 0;
    }
    
    // Check if the current node's data matches the value
    if (root->data == value) {
        return 1;
    }
    
    // Recursively search in the left subtree
    if (searchNode(root->left, value)) {
        return 1;
    }
    
    // Recursively search in the right subtree
    return searchNode(root->right, value);
}

int main() {
    // Create nodes
    Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    
    int valueToSearch = 5;
    
    // Search for the value in the binary tree
    if (searchNode(root, valueToSearch)) {
        printf("Value %d found in the binary tree.\n", valueToSearch);
    } else {
        printf("Value %d not found in the binary tree.\n", valueToSearch);
    }
    
    // Free allocated memory (not shown here for simplicity)
    // In a real application, you'd need to implement a function to free the tree nodes.

    return 0;
}
