#include <stdio.h>
#include <stdlib.h>

// Define the structure for a tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to find the depth of a specific node
int findDepth(Node* root, int value, int currentDepth) {
    // Base case: if the root is NULL, return -1 (node not found)
    if (root == NULL) {
        return -1;
    }
    
    // Check if the current node's data matches the value
    if (root->data == value) {
        return currentDepth;
    }
    
    // Recursively search in the left subtree
    int leftDepth = findDepth(root->left, value, currentDepth + 1);
    if (leftDepth != -1) {
        return leftDepth;
    }
    
    // Recursively search in the right subtree
    return findDepth(root->right, value, currentDepth + 1);
}

int main() {
    // Create nodes
    Node* root = createNode(10);
    root->left = createNode(5);
    root->right = createNode(20);
    root->left->left = createNode(3);
    root->left->right = createNode(8);
    root->right->left = createNode(15);
    root->right->right = createNode(25);
    
    int valueToFind = 8;
    
    // Find the depth of the specified node
    int depth = findDepth(root, valueToFind, 0);
    
    // Print the depth of the node
    if (depth != -1) {
        printf("Depth of node with value %d: %d\n", valueToFind, depth);
    } else {
        printf("Node with value %d not found in the binary tree.\n", valueToFind);
    }
    
    // Free allocated memory (not shown here for simplicity)
    // In a real application, you'd need to implement a function to free the tree nodes.

    return 0;
}
