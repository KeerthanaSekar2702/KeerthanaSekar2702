#include <stdio.h>
#include <stdlib.h>

// Define the structure for a tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Helper function to calculate the height of the tree and update the diameter
int height(Node* root, int* diameter) {
    if (root == NULL) {
        return 0;
    }
    
    // Compute the height of left and right subtrees
    int leftHeight = height(root->left, diameter);
    int rightHeight = height(root->right, diameter);
    
    // Update the diameter
    int currentDiameter = leftHeight + rightHeight;
    if (currentDiameter > *diameter) {
        *diameter = currentDiameter;
    }
    
    // Return the height of the current node
    return (leftHeight > rightHeight ? leftHeight : rightHeight) + 1;
}

// Function to calculate the diameter of the binary tree
int diameterOfBinaryTree(Node* root) {
    int diameter = 0;
    height(root, &diameter);
    return diameter;
}

int main() {
    // Create nodes
    Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->right = createNode(6);
    root->right->right->right = createNode(7);
    
    // Calculate the diameter of the binary tree
    int treeDiameter = diameterOfBinaryTree(root);
    
    // Print the diameter of the tree
    printf("Diameter of the binary tree: %d\n", treeDiameter);
    
    // Free allocated memory (not shown here for simplicity)
    // In a real application, you'd need to implement a function to free the tree nodes.

    return 0;
}
