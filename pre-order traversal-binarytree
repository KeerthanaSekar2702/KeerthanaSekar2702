#include <stdio.h>
#include <stdlib.h>

// Define the structure for a tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to perform pre-order traversal
void preOrderTraversal(Node* root) {
    if (root == NULL) {
        return;
    }
    // Visit the root node
    printf("%d ", root->data);
    // Recursively traverse the left subtree
    preOrderTraversal(root->left);
    // Recursively traverse the right subtree
    preOrderTraversal(root->right);
}

int main() {
    // Create nodes
    Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    
    // Perform pre-order traversal
    printf("Pre-order traversal of the binary tree:\n");
    preOrderTraversal(root);
    
    // Free allocated memory (not shown here for simplicity)
    // In a real application, you'd need to implement a function to free the tree nodes.

    return 0;
}
